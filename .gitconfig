[user]
	name = VinceCabs
	# email = stored in env var

[credential]
	helper = store

[core]
	editor = code --wait
	pager = delta --diff-so-fancy

[interactive]
	pager = delta --diff-so-fancy

[credential]
	helper = store

[pull]
	rebase = false

[fetch]
	prune = true

[alias]

  # personal
  alias = """! git config --get-regexp ^alias\\. \
  | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / \
  | sort \
  """ # print these aliases
  st = status --short --branch
  co = checkout
  cb = checkout -b  # create branch and checkout on it
  newb = checkout -b
  master = checkout master
  main = checkout main
  a = add
  aa = add -A
  ssave = stash save
  slist = stash list
  spop = stash pop
  sdrop = stash drop
  unstage = reset HEAD
  nuke = reset --hard HEAD
  c = commit
  cm = commit -m
  amend = ! git commit --amend
  br = branch
  brd = branch -d
  brD = branch -D
  # list branches and authors
  brlist = "! git for-each-ref --format=' %(authorname) %09 %(refname)' --sort=authorname"
  # list my branches 
  brlistmy = "! git for-each-ref --format=' %(authorname) %09 %(refname)' --sort=authorname | grep "$(git config user.name)
  # rename branch
  rename = "!f() { branch_name=$(git rev-parse --abbrev-ref HEAD); git branch -m $1; git push origin $1; git push origin --delete $branch_name; }; f"
  merger = merge  # because I often type "merger", don't know why
  l = log
  ll = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  lp = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --patch
  graph = log --all --decorate --oneline --graph  # nice graphs
  incoming = log --oneline ..@{u}
  outgoing = log --oneline @{u}..
  df = diff --name-only
  merged = branch --merged
  dmerged = !git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d  # delete merged branches
  pushu = push -u origin HEAD
  f = fetch --all
  fpull = fetch --all && pull
  # print TODO (details)
  todo = "! git grep --extended-regexp -I --line-number --break --heading --color=auto 'TODO|FIXME'"
  # print TODO (short)
  td = "! git grep --extended-regexp -I --line-number --count 'TODO|FIXME'"

[delta]
  navigate = true    # use n and N to move between diff sections
  side-by-side = true
  # line-numbers-left-format = ""
  # line-numbers-right-format = "â”‚ "

  # delta detects terminal colors automatically; set one of these to disable auto-detection
  # dark = true
  # light = true

[merge]
  conflictstyle = diff3

[diff]
  colorMoved = default